INSERT INTO "isad_casestudy" VALUES  (1,7,'A Library Information System for SE VLabs Institute','<p> The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution. </p> <p> As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only. </p> <p> The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (e.g., passwords) is stored in plain text. </p>','<p>Let us consider the &quot;Issue Book&quot; use case and represent the involved steps in a sequence diagrams shown in Figure 1. We assume that the book to be issued is available. An user makes a request to issue a book against his account.This is shown by the &quot;issueBook(bookID)&quot; call from &quot;Member&quot; to &quot;IssueManager&quot;objects. At this point the system checks whether that particular user can issue another book (based on the maximum number of books that he can issue) by invoking the &quot;canIssue()&quot; method on the &quot;Member&quot;. As a result of this call, a response (&quot;status&quot;) is sent back to the &quot;IssueManager&quot; class. If the&quot;status&quot; is &quot;true&quot; (as indicated in the note), status of the concerned book is set to &quot;issued&quot;.A new transaction is saved corresponding to the current issue of book by the user. Finally, a success message is sent back to &quot;Member&quot; indicating that the book was successfully issued.</p><center>    <img src="seq_issue_book.png" alt="Issue book sequence diagram"    class="diagram">    <br>    Figure 1: Sequence diagram for &quot;Issue Book&quot;.</center><p>Few points could be noted here. Notes can be used almost anywhere within an UML diagram for whatever purpose. In Figure 1 we use a note to specify the condition when status of a book is set to ''issued''. UML 1.0 had used guard conditions to specify such kind of Boolean logic. UML 2.0 provide components to specify the alternate scenarios within a sequence diagram (not discussed here). One can definitely make use of these components. However, if the number of IF-THEN-ELSE conditions in a sequence diagram becomes high, the diagram gets complicated. In such cases one can draw multiple sequence diagrams for alternate conditions. </p><p>One key component in Figure 1 is the &quot;IssueManager&quot; class. This class does not represent the actual Library Information System (LIS). Rather, this is a part of LIS -- a specific module to handle issuing of books to the members.</p><p>Also, note that the life cycle of the &quot;Transactions&quot; has been shown as self-destroyed. To understand this, consider how a transaction is actually implemented in code. One creates an object from &quot;Transactions&quot; class, fills it up with all necessary information, and then saves the transaction. Thereafter, the transaction object is not required to be in memory.</p><p>Figure 2 shows the order of steps involved in the process of purchasing of a new book. In this case also, &quot;PurchaseManager&quot; is a part of LIS, which manages all books that are being purchased. The activation bars indicate the different instances when a particular object is active in their corresponding life cycles. </p><center>    <img src="seq_purchase_books.png" alt="Purchase books sequence diagram"    class="diagram">    <br>    Figure 2: Sequence diagram for &quot;Purchase Books&quot;.</center><p>One may have doubts over the inclusion of &quot;Distributor&quot; class. &quot;Distributor&quot; is not a constituent of the LIS;however, it interacts with LIS. Here &quot;Distributor&quot; is meant to represent the &quot;interface&quot; between LIS and the actual, physical book sellers and distributors. For instance, LIS can store details of distributor XYZ, including its email address, bank account number, into its records. Whenever the librarian places a new order to XYZ, the order is being sent electronically to XYZ, processed (possibly with a delay), a corresponding invoice is generated, and sent back to LIS. &quot;placeOrder(orderID)&quot; has been indicated as asynchronous calls since the calling object can continue with other tasks. The books would be dispatched by XYZ physically, which lies outside the boundary of LIS. Once the ordered books have been received, the librarian opts to make payment for his orders, which, too, could happen electronically through Net Banking. Technology has, indeed,made a huge progress!</p><p>Finally, at his leisure time, the librarian might consider updating the inventory according to the corresponding order.</p><p>&nbsp;</p><p>Classes are the fundamental components of any object oriented design and development. Unless individual class, its attributes and associated operations have been modeled well, a lot of suffering could await during the development phase. However, unlike waterfall model, the life cycle in object oriented development is iterative. One builds a model, analyze its efficiency, and refines it thereafter, if required. Therefore, an analyst, designer, or developer does not have the tight constraints to create a perfect artat one go.</p><p>Based on conceptual modeling and domain knowledge we already had identified a list of classes. We present them here once again:</p><ul>     <li>Member</li>     <li>Book</li>     <li>Transaction (of books)</li>     <li>Librarian</li>     <li>Employee</li>     <li>Book Inventory</li>     <li>Distributor</li>     <li>Order</li>     <li>Order Line Item</li>     <li>Payment</li>     <li>Invoice</li> </ul><p>Let''s focus on the &quot;Member&quot;, &quot;Librarian&quot; and &quot;Employee&quot; classes. The &quot;Employee&quot; class could be considered as a parent class, some of whose properties are inherited by the &quot;Member&quot; class. Again, &quot;Librarian&quot;is just a special type of &quot;Member&quot; with certain extra privileges. However, it may be noted here that LIS in no way would be interested to know about employees who are not members of LIS. Moreover, to distinguish between a normal member and a librarian, one could define a set of roles, and assign them appropriately to the members. This approach provides a flexible approach to manage users. For example, if the librarian goes on a leave, another member could be assigned the librarian role temporarily. Therefore, we decide to have a single &quot;Member&quot; class, whose instances could have one or more roles. This is shown in Figure 3 with the &quot;association&quot; relationship between &quot;Member&quot; and &quot;Role&quot;classes. The &quot;Role&quot; class could consist of a list of available roles. A list could be maintained in the &quot;Member&quot; class to indicate which roles are associated with a particular instance of it.</p><center><div style="width: 850px; overflow: scroll;"  class="diagram">    <img src="class_1.png" alt="Class diagram for LIS">    <br>    Figure 3: A simplified class diagram for LIS.</div></center><p>The &quot;LIS&quot; class consists of several modules: &quot;RegistrationManager&quot;, &quot;IssueManager&quot;, &quot;ReturnManager&quot;,and &quot;PurchaseManager&quot;. Their &quot;composition&quot; relationship with &quot;LIS&quot; indicates that any of these individual modules would not exist without the existence of &quot;LIS&quot;. The &quot;IssueManager&quot; class is responsible for issue and reissue of books while considering the two-times reissue constraint placed on a book.</p><p>The relation between &quot;IssueManager&quot; class and &quot;Book&quot; class is shown as &quot;weak dependency&quot;. This is due to the reason that the &quot;IssueManager&quot; class do not require a &quot;Book&quot; as it is a member variable. Rather, when an user has issued a book, the concerned method in &quot;IssueManager&quot; just needs to update the status of the corresponding book. No instance of &quot;Book&quot; needs to be created. The arrow from &quot;IssueManager&quot; to &quot;Book&quot; indicates that only the former knows about the &quot;Book&quot; class.The relationship between &quot;PurchaseManager&quot; and &quot;Distributor&quot; is, however, not a weak dependency. The&quot;PurchaseManager&quot; class has a member variable of type &quot;Distributor&quot;, which keeps track of the distributor selected for the current purchase.</p><p>With the classes so identified, the code for issue book could look as follows:</p><script type="text/javascript" src="/isad/v_media/lib/SyntaxHighlighter/scripts/shBrushJava.js"></script><pre class="brush: java;">
public ID IssueBook(ID userID, ID bookID) {
    Member user = Member.GetMember(userID);
    ID transactionID = null;
    if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {
        Book.SetStatusIssued(bookID);
        user.incrementIssueCount(bookID);
        BookTransaction transaction = new BookTransaction(userID, bookID);
        transaction.save();
        transactionID = transaction.getID();
    }
    return transactionID;
}</pre><p>The code for reissuing a book to an user could look like the following.</p><pre class="brush: java;">
public ID ReissueBook(ID userID, ID bookID) {
    Member user = Member.GetMember(userID);
    ID transactionID = null;
    if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {
        Integer count = user.getReissueCountFor(bookID);    // # of times this books has been reissued after its recent issue by the user
        if ( count < REISSUE_LIMIT ) {
            user.incrementReissueCount(bookID);
            BookTransaction transaction = new BookTransaction(userID, bookID);
            transaction.save();
            transactionID = transaction.getID();
        }
    }
    return transactionID;
}</pre>'),
 (3,6,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p>','<p>From the given problem we can identify at least four different functionality offered by the system:<ul>    <li>Register a new member</li>    <li>Issue book</li>    <li>Reissue book</li>    <li>Update inventory</li></ul></p><p>To begin with, let''s consider the activity diagram for user registration, as shown in Figure 1.</p><center>    <img class="diagram" src="act_registration.png" alt="User Registration">    Figure 1: Activity diagram for new user registration.</center>    <p>A new user fills up the registration form for library membership (either online or in paper), and submits to the librarian.Of course, an already registered user cannot create another account for himself (or, herself). For users'' who does not have an account already and have submitted their registration forms, the librarian verifies the information provided, possibly against the central database used by the institution. If all information have been provided correctly, librarian goes on with creating a new account for the user. Otherwise, the user is asked to provide all and correct information in his (her)registration form. Once a new account has been created for the user, he (she) is being issued an ID card, which is to be provided for any future transaction in the library.</p><p>Note that in the above diagram two swim lanes haven been shown indicated by the labels <i>User</i> and <i>Librarian</i>.The activities have been placed in swim lanes that correspond to the relevant role.</p><p>One of the major events that occur in any library is issue of books to its members. Figure 2 tries to depict the work flow involved while issuing books.</p><center>    <img class="diagram" src="act_issue.png" alt="User Registration">    Figure 2: Activity diagram for issuing books.</center>    <p><p></p><p>Now let''s focus on Figure 3, which shows the typical work flow of inventory update by the librarian. Note that since these are the tasks performed only by the librarian (and no one else plays a role), we skip the swim lanes.</p><center>    <img class="diagram" src="act_inventory_update.png" alt="User Registration">    Figure 3: Activity diagram for updating inventory.</center>    <p>Addition of new books and removing records of books taken off from the shelves could be done in parallel. This means, one does not have to complete the task of addition of all new books before doing any removal. Merging of these two activities and the subsequent <i>Update inventory</i> activity indicates that it is not required to complete all addition and removals before proceeding to update the database. That is, a few books could be added, then update the database, then again continue with the tasks.</p><p>Finally, the work flow terminates when all addition and removal tasks have been completed.</p>'),
 (4,1,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (e.g., passwords) is stored in plain text. </p>','<h3>Identification of functional requirements</h3><p>The above problem statement gives a brief description of the proposed system. From the above, even without doing any deep analysis, we might easily identify some of the basic functionality of the system:<ul>  <li><strong>New user registration:</strong> Any member of the institute who wishes to avail the facilities of   the library has to register himself with the Library Information System. On successful registration, a user ID   and password would be provided to the member. He has to use this credentials for any future transaction in LIS.</li>  <li><strong>Search book:</strong> Any member of LIS can avail this facility to check whether any particular book is  present in the institute''s library. A book could be searched by its:    <ul style="font-size: 1em;">        <li style="font-size: 1em;">Title</li>        <li style="font-size: 1em;">Authors name</li>        <li style="font-size: 1em;">Publisher''s name</li>    </ul>  </li>  <li><strong>User login:</strong> A registered user of LIS can login to the system by providing his employee ID   and password as set by him while registering. After successful login, &quot;Home&quot; page for the user is shown from  where he can access the different functionalities of LIS: search book, issue book, return book, reissue book.  Any employee ID not registered with LIS cannot access the &quot;Home&quot; page -- a login failure message  would be shown to him, and the login dialog would appear again. This same thing happens when any registered user  types in his password wrong. However, if incorrect password has been provided for three time consecutively, the  security question for the user (specified while registering) with an input box to answer it are also shown. If  the user can answer the security question correctly, a new password would be sent to his email address. In case  the user fails to answer the security question correctly, his LIS account would be blocked. He needs to contact  with the administrator to make it active again.  </li>  <li><strong>Issue book:</strong> Any member of LIS can issue a book against his account provided that:    <ul style="font-size: 1em;">        <li style="font-size: 1em;">The book is available in the library i.e. could be found by searching for it in LIS</li>        <li style="font-size: 1em;">No other member has currently issued the book</li>        <li style="font-size: 1em;">Current user has not issued the maximum number of books that can</li>    </ul>    If the above conditions are met, the book is issued to the member.     <br>    Note that this FR would remain <strong>incomplete</strong> if the "maximum number of books that can be issued    to a member" is not defined. We assume that this number has been set to four for students and research scholars, and    to ten for professors.    <br>    Once a book has been successfully issued, the user account is updated to reflect the same.  </li>  <li><strong>Return book:</strong> A book is issued for a finite time, which we assume to be a period of 20 days.   That is, a book once issued should be returned within the next 20 days by the corresponding member of LIS. After   successful return of a book, the user account is updated to reflect the same.  </li>  <li><strong>Reissue book:</strong> Any member who has issued a book might find that his requirement is not over  by 20 days. In that case, he might choose to reissue the book, and get the permission to keep it for another 20  days. However, a member can reissue any book at most twice, after which he has to return it. Once   a book has been successfully reissued, the user account is updated to reflect the information.</li></ul></p><p>In a similar way we can list other functionality offered by the system as well. However, certain features might not be evident directly from the problem system, but which, nevertheless, are required. One such functionality is "UserVerification". The LIS should be able to judge between a registered and non-registered member. Most of the functionality would be available to a registered member. The "New User Registration" would, however, be available to non-members. Moreover, an already registered user should not be allowed to register himself once again.</p><p>Having identified the (major) functional requirements, we assign an identifier to each of them [v] for future reference and verification. The following Table shows the list:<center><table class="techno"><caption>Table 01: Identifier and priority for software requirements</caption><thead>    <tr>        <th>#</th>        <th>Requirement</th>        <th>Priority</th>    </tr>  </thead><tbody>    <tr>        <td>R1</td>        <td>New user registration</td>        <td>High</td>    </tr>    <tr>        <td>R2</td>        <td>User Login</td>        <td>High</td>    </tr>    <tr>        <td>R3</td>        <td>Search book</td>        <td>High</td>    </tr>    <tr>        <td>R4</td>        <td>Issue book</td>        <td>High</td>    </tr>    <tr>        <td>R5</td>        <td>Return book</td>        <td>High</td>    </tr>            <tr>        <td>R6</td>        <td>Reissue book</td>        <td>Low</td>    </tr></tbody></table></center></p><h3>Identification of non-functional requirements</h3><p>Having talked about functional requirements, let''s try to identify a few non-functional requirements.<ul>    <li><strong>Performance Requirements:</strong>        <ul style="font-size: 0.9em;">            <li>This system should remain accessible 24x7</li>            <li>At least 50 users should be able to access the system altogether at any given time</li>        </ul>          </li>     <li><strong>Security Requirements:</strong>        <ul style="font-size: 0.9em;">            <li>This system should be accessible only within the institute LAN</li>            <li>The database of LIS should not store any password in plain text -- a hashed value has to be stored</li>        </ul>    </li>    <li><strong>Software Quality Attributes</strong></li>    <li><strong>Database Requirements</strong></li>    <li><strong>Design Constraints:</strong>        <ul style="font-size: 0.9em;">            <li>The LIS has to be developed as a web application, which should work with Firefox 5, Internet Explorer 8,            Google Chrome 12, Opera 10</li>             <li>The system should be developed using HTML 5</li>        </ul>     </li>        </ul></p><p>Once all the functional and non-functional requirements have been identified, they are documented formally in SRS,which then serves as a legal agreement.</p>'),
 (5,3,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (e.g., passwords) is stored in plain text. </p>','<p>From the given problem statement we can identify a list of actors and use cases as shown in tables 1 & 2respectively. We assign an identifier to each use case, which we would be using to map from the software requirements identified earlier.</p><center><table class="techno"><caption>Table 1: List of actors</caption><thead>    <tr>                <th>Actor</th>        <th>Description</th>    </tr>  </thead><tbody>    <tr>        <td>Member</td>        <td>Can avail LIS facilities; could be student, professor, researcher</td>    </tr>    <tr>        <td>Non-member</td>        <td>Need to register to avail LIS facilities</td>    </tr>    <tr>        <td>Librarian</td>        <td>Update inventory and other administrative tasks</td>    </tr>    <tr>        <td>Library staff</td>        <td>Handle day-to-day activities with the LIS</td>    </tr>    </tbody></table></center><p>&nbsp;</p><center>  <table class="techno"><caption>Table 2: List of use cases</caption><thead>    <tr>        <th>#</th>        <th>Use Case</th>        <th>Description</th>    </tr>  </thead><tbody>    <tr>        <td>UC1</td>        <td>Register</td>        <td>Allows to register with the LIS and create an account for all transactions</td>    </tr>    <tr>        <td>UC2</td>        <td>User login</td>        <td>LIS authenticates a member to let him avail the facilities</td>    </tr>    <tr>        <td>UC3</td>        <td>Search book</td>        <td>A member can can search for a book</td>    </tr>        <tr>        <td>UC4</td>        <td>Issue book</td>        <td>Allows a member to issue a specified book against his account</td>    </tr>    <tr>        <td>UC5</td>        <td>Return book</td>        <td>To return a book, which has been issued earlier by a member</td>    </tr>    <tr>        <td>UC6</td>        <td>Reissue book</td>        <td>To reissue a book</td>    </tr>        <tr>        <td>UC7</td>        <td>User logout</td>        <td>User logs out from the system</td>    </tr></tbody></table></center><p>Before presenting the details of individual use cases, let us do a mapping from requirements specifications to use cases. A list of functional requirements can be found in Table 1.For each such requirements, we identify the use case(s) that helps to achieve the requirement. This mapping is shown in Table 3. Please note that we would be mapping only <em>functional requirements</em> into use cases. A method to deal with non-functional requirements could be found in [vi].</p><center><table class="techno"><caption>Table 3: Mapping functional requirements to use cases</caption><thead>    <tr>        <th>FR #</th>        <th>FR Description</th>        <th>Use Case(s)</th>    </tr>  </thead><tbody>    <tr>        <td>R1</td>        <td>New user registration</td>        <td>UC1</td>            </tr>    <tr>        <td>R2</td>        <td>User login</td>        <td>UC2</td>            </tr>    <tr>        <td>R3</td>        <td>Search book</td>        <td>UC3</td>            </tr>    <tr>        <td>R4</td>        <td>Issue book</td>        <td>UC4</td>            </tr>    <tr>        <td>R5</td>        <td>Return book</td>        <td>UC5</td>            </tr>    <tr>        <td>R6</td>        <td>Reissue book</td>        <td>UC6</td>            </tr></tbody>    </table></center><p>Now let us deal with the inner details of a few use cases and the actors with whom they are associated.Table 4 shows the details of the &quot;User login&quot; use case using a template presented in Table 1 in [v].</p><center><table class="techno"><caption>Table 4: UC2 -- User login</caption><tbody>    <tr>        <td style="font-weight: bold;">Use Case</td>        <td>UC2. User login</td>                 </tr>    <tr>        <td style="font-weight: bold;">Description</td>        <td>Allows a member to login to the system using his user ID and password</td>                 </tr>    <tr>        <td style="font-weight: bold;">Assumptions</td>        <td></td>                 </tr>    <tr>        <td style="font-weight: bold;">Actors</td>        <td>            <ul>                <li>Member</li>            </ul>        </td>                 </tr>    <tr>        <td style="font-weight: bold;">Steps</td>        <td>            <ol>                <li>User types in user ID</li>                <li>User types in password</li>                <li>User clicks on the ''Login'' button</li>                <li>IF successful THEN show home page                <br>ELSE display error                </li>            </ol>        </td>                 </tr>    <tr>        <td style="font-weight: bold;">Variations</td>        <td></td>                 </tr>    <tr>        <td style="font-weight: bold;">Non-functional</td>        <td></td>                 </tr>    <tr>        <td style="font-weight: bold;">Issues</td>        <td></td>                 </tr></tbody></table></center>    <p>The above use case lets an already registered member of the LIS to login to the system and possibly use its various features. If the user provides a correct pair of (&lt;user_id&gt;, &lt;password&gt;) then he can access his home page. However, if the login credentials are incorrect, an error message is displayed to him. Figure 1 shows its pictorial representation.<center>    <img src="user_login.png" class="diagram">    <br>    Figure 1: Use case diagram showing &quot;New user registration&quot; use case.</center></p><p>The above Figure also depicts extension of a use case. &quot;Answer security question&quot; is not a use case by itself, and is not invoked in a &quot;normal&quot; flow. However, when a member is trying to login, and provides incorrect (&lt;user_id&gt;, &lt;password&gt;)for three consecutive times, he is asked the security question that was set during registration. If user can answer the question correctly,the password is send to his email address. However, if the user fails to answer the security question correctly, his account is temporarily blocked. Details of the concerned use case extension is shown in Table 5.</p><center><table class="techno"><caption>Table 5: Extension for use case New user registration</caption><tbody>        <tr>        <td style="font-style: bold;">Use Case Extension</td>        <td style="text-align: left;">Answer security question <strong>extends</strong> UC2. User login</td>                 </tr>    <tr>        <td style="font-style: bold;">Description</td>        <td style="text-align: left;">Deals with the condition when a user has three consecutive login failures, and he attempts to login again</td>                 </tr>    <tr>        <td style="font-style: bold;">Steps</td>        <td style="text-align: left;">            <strong>3a.</strong> IF consecutive failure count is 3 THEN invoke &quot;Answer security question&quot;                    </td>                 </tr></tbody></table></center><p>The details of the &quot;Issue book&quot; use case is shown in Table 6. </p><center><table class="techno"><caption>Table 6: UC5 -- Issue book</caption><tbody>    <tr>        <td style="font-style: bold;">Use Case</td>        <td>UC5. Issue book</td>                 </tr>    <tr>        <td style="font-style: bold;">Description</td>        <td>Allows a member to issue a specified book against his account</td>                 </tr>    <tr>        <td style="font-style: bold;">Assumptions</td>        <td>            <ol>                <li>User is logged in</li>                <li>The book is available</li>                                <li>User''s account has not exceeded the limit of maximum books that can be issued</li>            </ol>        </td>                 </tr>    <tr>        <td style="font-style: bold;">Actors</td>        <td>            <ul>                <li>Member (primary)</li>                <li>Library staff</li>            </ul>        </td>                 </tr>    <tr>        <td style="font-style: bold;">Steps</td>        <td>            <ol>                <li>User logs in</li>                <li>User searches for a book</li>                <li>User clicks on &quot;Issue&quot; button to issue the book</li>                <li>User''s account is updated</li>                <li>Library staff delivers the book</li>            </ol>                    </td>                 </tr>    <tr>        <td style="font-style: bold;">Variations</td>        <td></td>                 </tr>    <tr>        <td style="font-style: bold;">Non-functional</td>        <td></td>                 </tr>    <tr>        <td style="font-style: bold;">Issues</td>        <td></td>                 </tr></tbody></table></center>    <p>In order to issue a book, the availability of the book has to be checked.Also, the system needs to verify whether another book could be issued to the current user.These are shown in Figure 2 by the &laquo;include&raquo; relationship among the use cases. The maximum # of books that can be issued to a user depends on whether he is a student or a professor. So, &quot;Verify issue count&quot; is a general use case, which has been specialized by &quot;Verify student issue count&quot; and &quot;Verify professor issue count&quot;use cases. These have been represented by the &quot;generalization&quot; relationship in Figure 2.</p><center>    <img src="issue_book.png" class="diagram">    <br>    Figure 2: Use case diagram showing &quot;Issue book&quot; use case.</center><p>In the above scenario &quot;Member&quot; is the primary actor who triggers the &quot;Issue book&quot;use case. &quot;Library staff&quot; is a secondary actor here.</p>'),
 (6,2,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (e.g., passwords) is stored in plain text. </p>','<p>The SE VLabs Institute has a IT management team of its own. This team has been given the task to execute the Library Information System project.The team consists of a few experts from industry, and a batch of highly qualified engineers experienced with design and implementation of information systems. It is planned that the current project will be undertaken by a small team consisting of one expert and few engineers.Actual team composition would be determined in a later stage.</p><p>Using COCOMO and based on the team size (small) and experience (high), the concerned project could be categorized as &quot;organic&quot;. The experts, based on their prior experience, suggested that the project size could roughly be around 10 KLOC. This would serve as the basis for estimation of different project parameters using basic COCOMO, as shown below:</p><pre>
    Effort = a * (KLOC)<sup>b</sup> PM
    Tdev = 2.5 * (Effort)<sup>c</sup> Months</pre><p>For organic category of project the values of a, b, c are 2.4, 1.05, 0.38 respectively. So, the projected effort required for this project becomes</p><pre>
    Effort = 2.4 * (10)<sup>1.05</sup> PM
           = 27 PM (approx)</pre><p>So, around 27 person-months are required to complete this project. With this calculated value for effort we can also approximate the development time required:</p><pre>
    Tdev = 2.5 * (27)<sup>0.38</sup> Months
         = 8.7 Months (approx)</pre><p>So, the project is supposed to be complete by nine months. However, estimations using basic COCOMO are largely idealistic. Let us refine them using intermediate COCOMO. Before doing so we determine the Effort Adjustment Factor (EAF) by assigning appropriate weight to each ofthe following attributes.</p><table cellspacing="0" cellpadding="0" class="data" style="background-color: white;"><thead><tr><th valign="bottom" rowspan="2">Cost&nbsp;Drivers</th><th colspan="6">Ratings</th></tr><tr><th align="center" width="10%" valign="bottom">Very Low</th><th align="center" width="10%" valign="bottom">Low</th><th align="center" width="10%" valign="bottom">Nominal</th><th align="center" width="10%" valign="bottom">High</th><th align="center" width="10%" valign="bottom">Very High</th><th align="center" width="10%" valign="bottom">Extra High</th></tr></thead><tbody><tr><th align="left" style="background-color: #dddddd;">Product&nbsp;attributes</th></tr><tr><td style="text-align: left;">Required&nbsp;software&nbsp;reliability</td><td align="center">0.75</td><td align="center">0.88</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">1.15</td><td align="center">1.40</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Size&nbsp;of&nbsp;application&nbsp;database</td><td align="center">&nbsp;</td><td align="center">0.94</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">1.08</td><td align="center">1.16</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Complexity&nbsp;of&nbsp;the&nbsp;product</td><td align="center">0.70</td><td align="center">0.85</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">1.15</td><td align="center">1.30</td><td align="center">1.65</td></tr><tr><th align="left" style="background-color: #dddddd;">Hardware&nbsp;attributes</th></tr><tr><td style="text-align: left;">Run-time&nbsp;performance&nbsp;constraints</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">1.11</td><td align="center">1.30</td><td align="center">1.66</td></tr><tr><td style="text-align: left;">Memory&nbsp;constraints</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">1.06</td><td align="center">1.21</td><td align="center">1.56</td></tr><tr><td style="text-align: left;">Volatility&nbsp;of&nbsp;the&nbsp;virtual&nbsp;machine&nbsp;environment</td><td align="center">&nbsp;</td><td align="center">0.87</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">1.15</td><td align="center">1.30</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Required&nbsp;turnabout&nbsp;time</td><td align="center">&nbsp;</td><td align="center">0.87</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">1.07</td><td align="center">1.15</td><td align="center">&nbsp;</td></tr><tr><th align="left" style="background-color: #dddddd;">Personnel&nbsp;attributes</th></tr><tr><td style="text-align: left;">Analyst capability</td><td align="center">1.46</td><td align="center">1.19</td><td align="center">1.00</td><td align="center" style="background-color: yellow;">0.86</td><td align="center">0.71</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Applications&nbsp;experience</td><td align="center">1.29</td><td align="center">1.13</td><td align="center">1.00</td><td align="center" style="background-color: yellow;">0.91</td><td align="center">0.82</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Software&nbsp;engineer&nbsp;capability</td><td align="center">1.42</td><td align="center">1.17</td><td align="center">1.00</td><td align="center" style="background-color: yellow;">0.86</td><td align="center">0.70</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Virtual&nbsp;machine&nbsp;experience</td><td align="center">1.21</td><td align="center">1.10</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">0.90</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Programming&nbsp;language&nbsp;experience</td><td align="center">1.14</td><td align="center">1.07</td><td align="center">1.00</td><td align="center" style="background-color: yellow;">0.95</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><th align="left" style="background-color: #dddddd;">Project&nbsp;attributes</th></tr><tr><td style="text-align: left;">Application&nbsp;of&nbsp;software&nbsp;engineering&nbsp;methods</td><td align="center">1.24</td><td align="center">1.10</td><td align="center">1.00</td><td align="center" style="background-color: yellow;">0.91</td><td align="center">0.82</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Use&nbsp;of&nbsp;software&nbsp;tools</td><td align="center">1.24</td><td align="center">1.10</td><td align="center">1.00</td><td align="center" style="background-color: yellow;">0.91</td><td align="center">0.83</td><td align="center">&nbsp;</td></tr><tr><td style="text-align: left;">Required&nbsp;development&nbsp;schedule</td><td align="center">1.23</td><td align="center">1.08</td><td align="center" style="background-color: yellow;">1.00</td><td align="center">1.04</td><td align="center">1.10</td></tr></tbody></table><p>The cells with yellow backgrounds highlight our choice of weight for each of the cost drivers. EAF is determined by multiplyingall the chosen weights. So, we get</p><pre>
    EAF = 0.53 (approx)</pre><p>Using this EAF value we refine our estimates from basic COCOMO as shown below</p>    <pre>
    Effort|<sub>corrected</sub> = Effort * EAF
                     = 27 * 0.53
                     = 15 PM (approx)
    Tdev|<sub>corrected</sub> = 2.5 * (Effort|<sub>corrected</sub>)<sup>c</sup>
                     = 2.5 * (15)<sup>0.38</sup>
                     = 7 months (approx)</pre><p>After refining our estimates it seems that seven months would likely be sufficient for completion of this project. This is still a rough estimate since we have not taken the underlying components of the software into consideration. Complete COCOMO model considers such parameters to give a more realistic estimate.</p>'),
 (7,4,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (e.g., passwords) is stored in plain text. </p>','<p>A robust database backend is essential for a high-quality information system. Database schema should be efficiently modeled, refined, and normalized. In this section we would develop a simple ER model for the Library Information System.</p><p>The first step towards ER modeling is to identify the set of relevant entities from the given problem statement. The two primary, and obvious, entity sets in this context are &quot;Member&quot; and &quot;Book&quot;. The entity set &quot;Member&quot; represents all students, professors, or employees who have registered themselves with the LIS. While registering with the LIS one has to furnish a lot of personal and professional information. This typically includes name (well, that is trivial), employee ID (roll # for students), email address,phone #, age, date of joining in this institute. The system may store some not-so-important information as well like, blood group, marital status, and so on. All these pieces of information that an user has to provide are sufficient to describe a particular member. These characteristics are the attributes of the entities belonging to the entity set &quot;Member&quot;.</p><p>It is essential for an entity to have one or more attributes that help us to distinguish it from another entity. ''Name'' cannot help that -- two persons could have exactly the same name. However, (''Name'', ''Phone #'')combination seems to be okay. No two persons can have the same phone number. ''Employee ID'', ''Email address'' are other potential candidates. Here, ''Employee ID'', ''Email address'' and (''Name'', ''Phone #'') are super keys.We choose ''Employee ID'' to uniquely identify an user in our implementation. So, ''Employee ID'' becomes our primary key (PK) for the &quot;Member&quot; entity set. Figure 1 represents this set along with its attributes and the primary key.</p><center>    <img src="member.png" alt="Member entity set" class="diagram">    <br>    Figure 1: &quot;Member&quot; entity set.</center><p>Let us now focus on the &quot;Book&quot; entity set. Typical attributes of a book are its title, name of author(s), publisher, date of publication, edition, language, ISBN-10, ISBN-13, price (of course!), date of purchase. The set of listed attributes for a book does not give a straight forward choice of primary key.For instance, several books could have the same title. Again, ISBN numbers for a book are specific to its edition -- it cannot distinguish between two books of the same edition. One might be tempted to use a combination of (''Title'', ''Authors'') as a primary key. This has some shortcomings. It is advisable not to use texts as a PK. Moreover, the number of authors that a book could have is not fixed, although it is a small, finite number. The rules of normalization (not covered here) would dictate to have a separate field for each author like ''Author1'', ''Author2'', and so on. Therefore, we assign an extra attribute, ''ID'', to each book as its PK. Different databases available in the market provide mechanisms to generate such an uniqueID, and automatically increment it whenever a new new entity is added. In fact, we could assign such an ID to the &quot;Member&quot; entity set as well. However, because of availability of the unique ''Employee ID'' field,we skipped that. A graphical representation of the &quot;Book&quot; entity set is shown in Figure 2.</p><center>    <img src="book.png" alt="Book entity set" class="diagram">    <br>    Figure 2: &quot;Book&quot; entity set.</center><p>One point to note here is that a book is likely to have multiple copies in the library. Therefore, one might wish to have a ''# of copies'' attribute for the &quot;Book&quot; entity set. However, that would not allow us to differentiate among the different copies of book bearing same title by same author(s), edition, and publisher. The approach that we have taken is to uniquely identify each book even though they are copies of the same title.</p><p>To buy any new book an order is to be placed to the distributor. This task is done by the librarian. Therefore,&quot;Librarian&quot; and &quot;Distributor&quot; are two other entities playing roles in this system.</p><p>Having identified the key entities, we could now relate them with each other. Let us consider the entity sets &quot;Member&quot;and &quot;Book&quot;. A member can issue books. In fact, he can issue multiple books up to a finite number say, N. A particular book, however, could be issued by a single member only. Therefore, we have a one-to-many mapping from &quot;Member&quot; to &quot;Book&quot; entity sets. This relationship between &quot;Member&quot;and &quot;Book&quot; entity sets is pictorially depicted in Figure 3.</p><center>    <img src="relationships.png" alt="Relationships among entity set" class="diagram">    <br>    Figure 3: Relationships among different entity sets.</center><p>Figure 3 also shows that the librarian can &quot;place order&quot;for books to the distributor. This is a many-to-many mapping since a librarian can purchase books from multiple distributors. Also, if the institute has more than one librarians (or any other staff having such authority), then each of them could place order to the same distributor. An order is termed as complete when distributor supplies the book(s) and invoice.</p><p>The design in Figure 3 has a flaw. Librarian himself could be a member of the LIS. However, he is a &quot;special&quot;kind of member since he can place order for books. Our ER diagram does not reflect this scenario. Such special roles of an entity set could be represented using &quot;ISA&quot; relationship, which is not discussed here.</p><p>Any kind of designing could not be possibly done at one go. Therefore, the baseline ER model so prepared should be revised by considering the business model yet again to ensure that all necessary information could be captured.Once this has been finalized, the next logical step would be to create table structures for each identified entity set (and relationships in some cases) and normalize the relations.</p>'),
 (8,10,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<style type="text/css">    table.techno tbody td {        text-align: left;    }    table.techno tbody td li {        font-size: 0.9em;    }</style><p>As already discussed under the theory section,test case preparation could begin right after requirements identification stage. It is desirable (and advisable) to create a Requirements Traceability Matrix (RTM)showing a mapping from individual requirement to test case(s). A simplified form of the RTM is shown in Table 1 (the numbers shown in this Table are arbitrary; not specific to LIS). </p><center><table class="techno">    <caption>Table 1: A simplified mapping from requirements to test cases</caption>    <thead>        <tr>            <th>Requirement #</th>            <th>Test Case #</th>        </tr>    </thead>    <tbody>        <tr>            <td>R1</td>            <td>TC1</td>        </tr>        <tr>            <td>R2</td>            <td>TC2, TC3, TC4</td>        </tr>        <tr>            <td>R3</td>            <td>TC5</td>        </tr>        <tr>            <td>R4</td>            <td>TC6</td>        </tr>            </tbody></table></center><p>Table 1 states which test case should help us to verify that a specified feature has been implemented and working correctly. For instance, if test case # TC6 fails, that would indicate requirement # R4 has not fully realized yet. Note that it is possible that a particular requirement might need multiple test cases to verify whether it has been implemented correctly.</p><p>To be specific to our problem, let us see how we can design test cases to verify the &quot;UserLogin&quot; feature. The simplest scenario is when both user name and password have been typed in correctly. The outcome will be that the user could then avail all features of LIS.However, there could be multiple unsuccessful conditions:<ul>    <li>User ID is wrong</li>    <li>Password is wrong</li>    <li>User ID & password are wrong</li>    <li>Wrong password given twice consecutively</li>    <li>Wrong password given thrice consecutively</li>    <li>Wrong password given thrice consecutively, and security question answered correctly</li>    <li>Wrong password given thrice consecutively, and security question answered incorrectly</li></ul></p><p>We would create test case for the above stated login scenarios. These test cases together would constitute a test suite to verify the concerned requirement. Table 2 shows the details of this test suite.</p><center><table class="techno" style="width: 810px;">    <caption>Table 2: A test suite to verify the &quot;User Login&quot; feature</caption>    <thead>        <tr style="border: 1px solid #95BCE2;">            <th colspan="2">#</th>            <th colspan="5" style="background-color: white; color: #454545; font-size: 12.5px; text-align: left;">TS1</th>                    </tr>        <tr style="border: 1px solid #95BCE2;">            <th colspan="2">Title</th>            <th colspan="5" style="background-color: white; color: #454545; font-size: 12.5px; text-align: left;">Verify &quot;User Login&quot; functionality</th>                    </tr>        <tr style="border: 1px solid #95BCE2;">            <th colspan="2">Description</th>            <th colspan="5" style="background-color: white; color: #454545; font-size: 12.5px; text-align: left;">To test the different scenarios that might arise while an user is trying to login</th>                    </tr>           <tr style="border: 1px solid #95BCE2;">             <th colspan="7" style="background-color: white;"></th>        </tr>        <tr>            <th>#</th>            <th>Summary</th>            <th>Dependency</th>            <th>Pre-condition</th>            <th>Post-condition</th>            <th>Execution Steps</th>            <th>Expected Output</th>        </tr>    </thead>    <tbody>        <tr>            <td>TC1</td>            <td>Verify that user already registered with the LIS is able to login with correct user ID and password</td>            <td></td>            <td>Employee ID <em>149405</em> is a registered user of LIS; user''s password is <em>this_is_password</em></td>            <td>User is logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405</em></li>                                        <li>Type in password <em>this_is_password</em></li>                        <li>Click on the ''Login'' button</li>                </ol>            </td>            <td>&quot;Home&quot; page for the user is displayed</td>        </tr>        <tr class="alt">            <td>TC2</td>            <td>Verify that an unregistered user of LIS is unable to login</td>            <td></td>            <td>Employee ID <em>149405xx</em> is not a registered user of LIS</td>            <td>User is not logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405xx</em></li>                                        <li>Type in password <em>whatever</em></li>                        <li>Click on the ''Login'' button</li>                                </ol>            </td>            <td>The &quot;Login&quot; dialog is shown with a <em>&quot;Login failed! Check your user ID and password&quot;</em> message</td>        </tr>        <tr>            <td>TC3</td>            <td>Verify that user already registered with the LIS is unable to login with incorrect password</td>            <td></td>            <td>Employee ID <em>149405</em> is a registered user of LIS; user''s password is <em>this_is_password</em></td>            <td>User is not logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405</em></li>                                        <li>Type in password <em>whatever</em></li>                    <li>Click on the ''Login'' button</li>                       </ol>            </td>            <td>The &quot;Login&quot; dialog is shown with a <em>&quot;Login failed! Check your user ID and password&quot;</em> message</td>        </tr>        <tr class="alt">            <td>TC4</td>            <td>Verify that user already registered with the LIS is unable to login with incorrect password given twice consecutively</td>            <td style="text-align: center;">TC3</td>            <td>This test case is executed after execution of TC3 before executing any other test case</td>            <td>User is not logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405</em></li>                                        <li>Type in password <em>whatever2</em></li>                                 <li>Click on the ''Login'' button</li>                                           </ol>            </td>            <td>The &quot;Login&quot; dialog is shown with a <em>&quot;Login failed! Check your user ID and password&quot;</em> message</td>        </tr>        <tr>            <td>TC5</td>            <td>Verify that user already registered with the LIS is unable to login with incorrect password given thrice consecutively</td>            <td style="text-align: center;">TC4</td>            <td>This test case is executed after execution of TC4 before executing any other test case</td>            <td>User is not logged in</td>            <td>                <ol>                    <li>Type in employee ID as <em>149405</em></li>                                        <li>Type in password <em>whatever3</em></li>                                 <li>Click on the ''Login'' button</li>                                                      </ol>            </td>            <td>The &quot;Login&quot; dialog is shown with a <em>&quot;Login failed! Check your user ID and password&quot;</em> message; the security question and input box for the answer are displayed</td>        </tr>                <tr class="alt">            <td>TC6</td>            <td>Verify that a registered user can login after three consecutive failures by correctly answering the security question</td>            <td style="text-align: center;">TC5</td>            <td>This test case is executed after execution of TC6 before executing any other test case. Answer to the security question is <em>my_answer</em>.</td>            <td>Email sent containing new password. The email is expected to be received within 2 minute.</td>            <td>                <ol>                                        <li>Type in the answer as <em>my_answer</em></li>                    <li>Click on the ''Email Password'' button</li>                                    </ol>            </td>            <td>Login dialog is displayed; an email containing the new password is received</td>        </tr>        <tr>            <td>TC7</td>            <td>Verify that a registered user''s account is blocked after three consecutive failures and answering the security question incorrectly</td>            <td></td>            <td>Execute the test cases TC3, TC4, and TC5 once again (in order) before executing this test case</td>            <td>User account has been blocked</td>            <td>                <ol>                                        <li>Type in the answer as <em>not_my_answer</em></li>                    <li>Click on the ''Email Password'' button</li>                                    </ol>            </td>            <td>The message <em>&quot;Your account has been blocked! Please contact the administrator.&quot;</em> appears</td>        </tr>         </tbody></table></center><p>In a similar way, test suites corresponding to other user requirements could be created as well. A good test plan can reduce the burden of testing team by specifying what exactly they should focus on. </p>'),
 (9,5,'A Library Information System for SE VLabs Institute','<p> The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution. </p> <p> As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only. </p> <p> The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<style type="text/css">    .category {        width: 260px; padding: 5px; float: left;    }    .category div {        font-weight: bold;        font-size: 1.1em;    }</style><p>From the given problem statement we can identify the following nouns and noun phrases:</p><ul><li>The SE VLabs Institute</li><li>Software Engineering</li><li>Research scholars</li><li>Students</li><li>Professors</li><li>Employees</li><li>Projects</li><li>Institution</li><li>Library Information System</li><li>Members</li><li>Book</li><li>Desk</li><li>Chamber</li><li>System</li><li>Library staff</li><li>Librarian</li><li>Transactions</li><li>Record</li><li>Shelf</li><li>Non-member</li><li>Web application</li><li>LAN</li><li>Software</li><li>Information</li><li>Passwords</li></ul><p>Let us put the above into different categories.</p><div style="display: inline">    <div class="category">        <div>People</div>        <ul>            <li>Research scholars</li>            <li>Students</li>            <li>Professors</li>            <li>Employees</li>            <li>Members</li>            <li>Library staff</li>            <li>Librarian</li>            <li>Non-member</li>        </ul>    </div>    <div class="category">        <div>Places</div>        <ul>            <li>Chamber</li>            </ul>    </div>    <div class="category">        <div>Things</div>        <ul>                <li>Projects</li>            <li>Book</li>            <li>Desk</li>                <li>System</li>            <li>Shelf</li>            <li>LAN</li>        </ul>    </div></div><div class="clear"></div><div style="display: inline">    <div class="category">        <div>Organizations</div>        <ul>            <li>The SE VLabs Institute</li>            <li>Institution</li>        </ul>    </div>    <div class="category">        <div>Concepts</div>        <ul>            <li>Software Engineering</li>            <li>Library Information System</li>            <li>Record</li>            <li>Web application</li>            <li>Software</li>            <li>Information</li>            <li>Password</li>        </ul>    </div>    <div class="category">        <div>Events</div>        <ul>            <li>Transactions</li>        </ul>    </div></div>    <div class="clear"></div>   <p>The nouns and noun phrases in the problem statement gives us a list of 25 potential classes. However, all of them may not be relevant. For example, ''Chamber'' is not something related to the Library Information System. And so are ''Projects'', ''Desk'', ''Shelf''. In a similar way, ''Software Engineering'', ''Web application'', ''Software'' does not seem to be potential classes in this context. If we filter these entries,we might find that the following set of classes directly relate to the business activities of LIS:</p><ul>    <li>Member</li>        <li>Book</li>    <li>Transaction (of books)</li>    <li>Librarian</li>    <li>Employee</li>    </ul><p>Although not explicitly mentioned in the problem statement, based on knowledge in related area one may point out few other potential classes:</p><ul>    <li>Book Inventory</li>    <li>Distributor</li>    <li>Order</li>    <li>Order Line Item</li>    <li>Payment</li>    <li>Invoice</li></ul><p>Among the classes listed above, ''Member'', ''Librarian'', ''Employee'' share some common characteristics. For instance, everyone has a name, each has got an unique ID in the institution. In fact, ''Librarian'' and ''Member'' are some specialized category of the class ''Employee''. (This considers a student is also an &quot;employee&quot;.) The above identified conceptual classes pave the way for modeling of design and implementation classes.</p>');
INSERT INTO "isad_casestudy" VALUES  (10,9,'A Library Information System for SE VLabs Institute','<p> The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution. </p> <p> As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only. </p> <p> The final deliverable would a web application (using the recent HTML 5), which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (e.g., passwords) is stored in plain text. </p>','<p>Let us determine the Cyclomatic complexity for the &quot;ReissueBook&quot; method as shown below:</p><script type="text/javascript" src="/isad/v_media/lib/SyntaxHighlighter/scripts/shBrushJava.js"></script><pre class="brush: java;">public ID ReissueBook(ID userID, ID bookID) {    Member user = Member.GetMember(userID);    ID transactionID = null;    if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {                Integer count = user.getReissueCountFor(bookID);    // # of times this books has been reissued after its recent issue by the user        if ( count < REISSUE_LIMIT ) {                    user.incrementReissueCount(bookID);            BookTransaction transaction = new BookTransaction(userID, bookID);                    transaction.save();            transactionID = transaction.getID();        }    }    return transactionID;}</pre><p>The Control Flow Graph for the above module is shown in Figure 1. The CFG has six nodes and seven edges. So, the Cyclomatic complexity is V(G) = 7 - 6 + 2 = 3.It can be verified with the other two formulae as well: # of regions + 1 = 2 + 1 = 3. Also, # of decision points = 2. So, V(G) = 2 + 1 = 3. However, as mentioned in the theory section, for methods of classes we add an extra 1 to the V(G). So, the Cyclomatic complexity of this method becomes 4, which is good.</p><center>    <img src="reissue_book.png" alt="Reissue book" class="diagram">    Figure 1: CFG for &quot;ReissueBook&quot; method.</center><p>Note that in line # 3 two decisions have been short-circuited. Taking this into account, V(G) for the module would become 5, which is OK. This implies that the method could have up to five linearly independent paths. By looking at Figure 1 we can easily identify three such paths. However, as mentioned that line # 3 consists of two decision points, that results in another &quot;implicit&quot; path. Based on these, we can design four test cases that would result in Boolean values for this sequence { user.canIssueNow, Book.IsAvailable, count < REISSUE_LIMIT }. The four such cases are shown below:</p><ul>    <li>{ true, true, true } : Output should be a valid ID</li>    <li>{ false, true, true } : Output would be null</li>    <li>{ true, false, true } : Output would be null</li>    <li>{ true, true, false } : Output would be null</li></ul><p>Now let us focus on the &quot;IssueManager&quot; class. For simplicity, let''s assume it has only two methods: IssueBook and ReissueBook, as shown below.</p><pre class="brush: java;">
public Class IssueManager {
    public ID IssueBook(ID userID, ID bookID) {
        Member user = Member.GetMember(userID);
        ID transactionID = null;
        if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {
            Book.SetStatusIssued(bookID);
            user.incrementIssueCount(bookID);
            BookTransaction transaction = new BookTransaction(userID, bookID);
            transaction.save();
            transactionID = transaction.getID();
        }
        return transactionID;
    }

    public ID ReissueBook(ID userID, ID bookID) {
        Member user = Member.GetMember(userID);
        ID transactionID = null;
        if ( user.canIssueNow() && Book.IsAvailable(bookID) ) {
            Integer count = user.getReissueCountFor(bookID);    // # of times this books has been reissued after its recent issue by the user
            if ( count < REISSUE_LIMIT ) {
                user.incrementReissueCount(bookID);
                BookTransaction transaction = new BookTransaction(userID, bookID);
                transaction.save();
                transactionID = transaction.getID();
            }
        }
        return transactionID;
    }
}</pre><p>&quot;IssueBook&quot; has two decision points (<em>if</em> and <em>&&</em>). So, V(G<sub>IssueBook</sub>) = (2 + 1) + 1 = 4. We have already determined V(G<sub>ReissueBook</sub>) to be 5. So, the total Cyclomatic complexity of this class (having two methods) becomes<span class="contentEquation">V(G) = (4 + 5) - 2 + 1 = 8</span></p>'),
 (11,8,'A Library Information System for SE VLabs Institute','<p>The SE VLabs Institute has been recently setup to provide state-of-the-art research facilities in the field of Software Engineering. Apart from research scholars (students) and professors, it also includes quite a large number of employees who work on different projects undertaken by the institution.</p><p>As the size and capacity of the institute is increasing with the time, it has been proposed to develop a Library Information System (LIS) for the benefit of students and employees of the institute. LIS will enable the members to borrow a book (or return it) with ease while sitting at his desk/chamber. The system also enables a member to extend the date of his borrowing if no other booking for that particular book has been made. For the library staff, this system aids them to easily handle day-to-day book transactions. The librarian, who has administrative privileges and complete control over the system, can enter a new record into the system when a new book has been purchased, or remove a record in case any book is taken off the shelf. Any non-member is free to use this system to browse/search books online. However, issuing or returning books is restricted to valid users (members) of LIS only.</p><p>The final deliverable would a web application, which should run only within the institute LAN. Although this reduces security risk of the software to a large extent, care should be taken no confidential information (eg., passwords) is stored in plain text. </p>','<p>Figure 1 shows the context-level DFD for LIS. The entire system is represented with a single circle (process). The external entities interacting with this system are members of LIS, library staff, librarian, and non-members of LIS. Two database are used to keep track of member information and details of books in the library.</p><p>Let us focus on the external entity, Member. In order to issue or return books a member has to login to the system. The data flow labeled with &quot;Login credentials&quot; indicate the step when a member authenticates himself by providing required information (user ID, password). The system in turn verifies the user credentials using information stored in the members database. If all information are not provided correctly, the user is shown a login failure message. Otherwise, the user can continue with his operation. Note that a DFD does not show conditional flows. It can only summarize the information flowing in and out of the system.</p><p>The data flow with the label &quot;Requested book details&quot; identify the information that the user has to provide in order to issue a book. LIS checks with the books database whether the given book is available. After a book has been issued, the transaction details is provided to the member.</p><div style="width: 900px; height: auto; overflow: scroll;">    <img src="dfd_level0.png" class="diagram"></div><p>Figure 1: Context-level DFD for Library Information System.</p><p>The level-1 DFD is shown in Figure 2. Here, we split the top-level view of the system into multiple logical components. Each process has a name, and a dotted-decimal number in the form 1.x. For example, the process &quot;Issue book&quot; has the number 1.2, which indicates that in the level 1 DFD the concerned process is numbered 2. Other processes are numbered in a similar way.</p><div style="width: 900px; height: auto; overflow: scroll;">    <img src="dfd_level1.png" class="diagram"></div><p>Figure 2: Level 1 DFD for Library Information System.</p><p>Comparing Figures 1 and 2 one might observe that the information flow in and out of LIS has been preserved. We observe in Figure 2 that the sub-processes themselves exchange information among themselves. These information flows would be, in turn, preserved if we decompose the system into a level 2 DFD.</p><p>Finally, in order to eliminate intersecting lines and make the DFD complex, the Member external entity has been duplicated in Figure 2. This is indicated by a * mark near the right-bottom corner of the entity box.</p>');
